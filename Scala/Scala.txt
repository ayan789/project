安装Scala-》start
1 https://www.scala-lang.org/download/ （下载包）
2 -zxvf scala-2.12.8.tgz （解压包）
3 vi ~/.bash_profile （修改环境配置文件）
  export SCALA_HOME=/Users/youth.s/Documents/scala-2.12.8
  :$SCALA_HOME/bin
4 source ~/.bash_profile （配置即时生效）
5 scala -version （查看scala版本）
6 scala （进入scala解释器）
7 1＋2 （返回3）
8 :q  （退出scala解释器）
安装Scala-》end

脚本形式运行
scalac HelloWorld.scala 编译
scala HelloWorld 执行

Scala 分号可以省掉

定义多行字符串
val foo = """1
     | 2
     | 3
     | 4
     | 6"""

变量声明
var myVar : String = "Foo"

常量声明
val myVal : String = "Foo"

多个变量声明
var xmax, ymax = 100  // xmax, ymax都声明为100

私有(Private)成员
private修饰的成员只在类或对象内部可见
object HelloWorld {
   class Outer{
    class Inner{
    private def f(){println("f")}
    class InnerMost{
        f() // 正确
        }
    }
    (new Inner).f() //错误
  }
}

保护(Protected)成员
Protected允许成员在类的子类中被访问（java中同一个包里的其他类也可以进行访问）
object HelloWorld {
   class Super{
    protected def f() {println("f")}
    }
    class Sub extends Super{
        f()
    }
    class Other{
       (new Super).f() //错误
    }
}

公共(Public)成员
Public任何地方都可以被访问
object HelloWorld {
   class Outer {
   class Inner {
      def f() { println("f") }
      class InnerMost {
         f() // 正确
      }
   }
   (new Inner).f() // 正确因为 f() 是 public
}
}

作用域保护 ？？？

算术运算符
object HelloWorld {
  def main(args: Array[String]) {
      var a = 10;
      var b = 20;
      var c = 25;
      var d = 25;
      println("a + b = " + (a + b) );
      println("a - b = " + (a - b) );
      println("a * b = " + (a * b) );
      println("b / a = " + (b / a) );
      println("b % a = " + (b % a) );
      println("c % a = " + (c % a) );
      
   }
}

关系运算符
object HelloWorld {
   def main(args: Array[String]) {
      var a = 10;
      var b = 20;
      println("a == b = " + (a == b) );
      println("a != b = " + (a != b) );
      println("a > b = " + (a > b) );
      println("a < b = " + (a < b) );
      println("b >= a = " + (b >= a) );
      println("b <= a = " + (b <= a) );
   }
}

逻辑运算符
object HelloWorld {
   def main(args: Array[String]) {
      var a = true;
      var b = false;

      println("a && b = " + (a&&b) );

      println("a || b = " + (a||b) );

      println("!(a && b) = " + !(a && b) );
   }
}

位运算符
object Test {
   def main(args: Array[String]) {
      var a = 60;           /* 60 = 0011 1100 */  
      var b = 13;           /* 13 = 0000 1101 */
      var c = 0;

      c = a & b;            /* 12 = 0000 1100 */ 
      println("a & b = " + c );

      c = a | b;            /* 61 = 0011 1101 */
      println("a | b = " + c );

      c = a ^ b;            /* 49 = 0011 0001 */
      println("a ^ b = " + c );

      c = ~a;               /* -61 = 1100 0011 */
      println("~a = " + c );

      c = a << 2;           /* 240 = 1111 0000 */
      println("a << 2 = " + c );

      c = a >> 2;           /* 15 = 1111 */
      println("a >> 2  = " + c );

      c = a >>> 2;          /* 15 = 0000 1111 */
      println("a >>> 2 = " + c );
   }
} 

赋值运算符
object HelloWorld {
   def main(args: Array[String]) {
      var a = 10;    
      var b = 20;
      var c = 0;

      c = a + b;
      println("c = a + b  = " + c );

      c += a ;
      println("c += a  = " + c );

      c -= a ;
      println("c -= a = " + c );

      c *= a ;
      println("c *= a = " + c );

      a = 10;
      c = 15;
      c /= a ;
      println("c /= a  = " + c );

      a = 10;
      c = 15;
      c %= a ;
      println("c %= a  = " + c );

      c <<= 2 ;
      println("c <<= 2  = " + c );

      c >>= 2 ;
      println("c >>= 2  = " + c );

      c >>= 2 ;
      println("c >>= a  = " + c );

      c &= a ;
      println("c &= 2  = " + c );
     
      c ^= a ;
      println("c ^= a  = " + c );

      c |= a ;
      println("c |= a  = " + c );
   }
}

if 语句
object HelloWorld {
   def main(args: Array[String]) {
      var x = 10
      if( x < 20 ){
         println("x < 20")
      }
   }
}

if...else 语句
object HelloWorld {
   def main(args: Array[String]) {
      var x = 30
      if( x < 20 ){
         println("x 小于 20")
      }else{
         println("x 大于 20")
      }
   }
}

if...else if...else 语句
object HelloWorld {
   def main(args: Array[String]) {
      var x = 30
      if( x == 10 ){
         println("X 的值为 10")
      }else if( x == 20 ){
         println("X 的值为 20")
      }else if( x == 30 ){
         println("X 的值为 30")
      }else{
         println("无法判断 X 的值")
      }
   }
}

while循环
object HelloWorld {
   def main(args: Array[String]) {
      var a = 10
      while( true ){
         println( "a 的值为 : " + a )
      }
   }
}

do...while 循环
循环至少执行一次
object HelloWorld {
   def main(args: Array[String]) {
      // 局部变量
      var a = 10
      // do 循环
      do{
         println( "Value of a: " + a )
         a = a + 1
      }while( a < 20 )
   }
}

for循环
i to j 语法(包含 j)
object HelloWorld {
   def main(args: Array[String]) {
      var a = 0
      // for 循环
      for( a <- 1 to 10){
          println( "Value of a: " + a )
      }
   }
}

i until j 语法(不包含 j)
object HelloWorld {
   def main(args: Array[String]) {
      var a = 0;
      // for 循环
      for( a <- 1 until 10){
         println( "Value of a: " + a );
      }
   }
}

object HelloWorld {
   def main(args: Array[String]) {
       var a = 0;
      var b = 0;
      // for 循环
      for( a <- 1 to 3; b <- 1 to 3){
         println( "Value of a: " + a );
         println( "Value of b: " + b );
      }
   }
}

for 循环集合
object HelloWorld {
   def main(args: Array[String]) {
      var a = 0;
      val numList = List(1,2,3,4,5,6);
      // for 循环
      for( a <- numList ){
         println( "Value of a: " + a );
      }
   }
}

for 循环中过滤的实例
object HelloWorld {
   def main(args: Array[String]) {
      var a = 0;
      val numList = List(1,2,3,4,5,6,7,8,9,10);
      // for 循环
      for( a <- numList
           if a != 3; if a < 8 ){
         println( "Value of a: " + a );
      }
   }
}

for 使用 yield
循环中的 yield 会把当前的元素记下来，保存在集合中，循环结束后将返回该集合
object HelloWorld {
   def main(args: Array[String]) {
      var a = 0;
      val numList = List(1,2,3,4,5,6,7,8,9,10);
      // for 循环
      var retVal = for{ a <- numList 
                        if a != 3; if a < 8
                      }yield a
      // 输出返回值
      for( a <- retVal){
         println( "Value of a: " + a );
      }
   }
}

方法
有返回值
object HelloWorld {
  def main(args: Array[String]) {
        println( "Returned Value : " + addInt(3,4) );
   }
   def addInt( a:Int, b:Int ) : Int = {
      var sum:Int = 0
      sum = a + b
      return sum
   }
}

无返回值
object HelloWorld {
  def main(args: Array[String]) {
        println( "Returned Value : " + printMe );
   }
    def printMe() : Unit = {
      println("Hello, Scala!")
   }
}

函数 - 可变参数
object HelloWorld {
  def main(args: Array[String]) {
        printStrings("Runoob", "Scala", "Python");
   }
   def printStrings( args:String* ) = {
      var i : Int = 0;
      for( arg <- args ){
         println("Arg value[" + i + "] = " + arg );
         i = i + 1;
      }
   }
}

指定函数参数名
object HelloWorld {
  def main(args: Array[String]) {
        printInt(b=5, a=7);
   }
   def printInt( a:Int, b:Int ) = {
      println("Value of a : " + a );
      println("Value of b : " + b );
   }
}

递归函数
object HelloWorld {
  def main(args: Array[String]) {
      for (i <- 1 to 10)
         println(i + " 的阶乘为: = " + factorial(i) )
   }   
   def factorial(n: BigInt): BigInt = {  
      if (n <= 1)
         1  
      else    
      n * factorial(n - 1)
   }
}

默认参数值
object HelloWorld {
   def main(args: Array[String]) {
        println( "返回值 : " + addInt(a=1) );
   }
   def addInt( a:Int=5, b:Int=7 ) : Int = {
      var sum:Int = 0
      sum = a + b
      return sum
   }
}

函数嵌套
object HelloWorld {
    def main(args: Array[String]) {
      println( factorial(0) )
      println( factorial(1) )
      println( factorial(2) )
      println( factorial(3) )
   }
   def factorial(i: Int): Int = {
      def fact(i: Int, accumulator: Int): Int = {
         if (i <= 1)
            accumulator
         else
            fact(i - 1, i * accumulator)
      }
      fact(i, 1)
   }
}

匿名函数
object HelloWorld {
    def main(args: Array[String]) {
      println( "multiplier(1) value = " +  multiplier(1) )
      println( "multiplier(2) value = " +  multiplier(2) )
   }
   var factor = 3
   val multiplier = (i:Int) => i * factor
}
























