package ${package}.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Map;
import ${package}.dao.${className}Dao;
import ${package}.domain.${className};
import ${package}.service.${className}Service;
import org.apache.commons.logging.LogFactory;

@Service
public class ${className}ServiceImpl implements ${className}Service {

	private static Log logger = LogFactory.getLog(${className}Controller.class);

	/*************************特别强调：
	 * 1、status 转码，转成  1:可用   0：不可用
	 * 2、属性对象不能为空
	 * 3、实现增量同步
	 **************************/

	@Autowired
	private ${className}Dao ${className}Dao;

	/*============通用get开始===========*/
	/**
     * <P>获取</P>
     * @param
     * @return
     * @throws Exception
     */
	@Override
	public ${className} get(${pk.attrType} ${pk.attrname}){
		return ${className}Dao.get(${pk.attrname});
	}
	
	@Override
	public List<${className}> list(Map<String, Object> map)
	{
		logger.info("入参:{}");
		return ${className}Dao.list(map);
		logger.info("出参:{}");
	}
	/*============通用get结束===========*/

	/*============通用count开始===========*/
	/**
     * <P>数量</P>
     * @param
     * @return
     * @throws Exception
     */
	@Override
	public int count(Map<String, Object> map){
		return ${className}Dao.count(map);
	}
	/*============通用count结束===========*/

	/*============通用save开始===========*/
	/**
     * <P>保存</P>
     * @param
     * @return
     * @throws Exception
     */
	@Override
	public int save(${className} ${classname}){ return ${className}Dao.save(${classname}); }
	/*============通用save结束===========*/

	/*============通用update开始===========*/
	/**
     * <P>修改</P>
     * @param
     * @return
     * @throws Exception
     */
	@Override
	public int update(${className} ${classname}){
		return ${className}Dao.update(${className});
	}
	/*============通用update结束===========*/

	/*============通用remove开始===========*/
	/**
     * <P>删除</P>
     * @param
     * @return
     * @throws Exception
     */
	@Override
	public int remove(${pk.attrType} ${pk.attrname}){
		return ${className}Dao.remove(${pk.attrname});
	}
	/*============通用remove结束===========*/

	/*============通用batchRemove开始===========*/
	/**
     * <P>批量删除</P>
     * @param
     * @return
     * @throws Exception
     */
	@Override
	public int batchRemove(${pk.attrType}[] ${pk.attrname}s){
		return ${className}Dao.batchRemove(${pk.attrname}s);
	}
	/*============通用batchRemove结束===========*/
	
}
