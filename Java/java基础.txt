八大基本类型 整形（byte short int 默认0 long）浮点型（float double） 字符型（char）布尔型（boolean 默认false）
装箱  Integer i = 100;
拆箱  int i = new Integer(100);
隐式类型转换（如int型转为long型）
显式类型转换（如long型型转为int型）long a = 10;int b = (int)a; 
高精度计算 BigDecimal(String)构造器创建对象才有意义,其他也可能精度丢失
float double 直接转换可能进度丢失，用String作为中转
valueOf  parseDouble 

数据结构
队列 先进先出 
栈 先进后出
链表  （单链）一部分存储data，一部分存储下个节点node（一个连接）（双链）一部分存储data，一部分存储前后两个节点node（两个连接） 循环链表（首位相连）
树 根节点 子节点
二叉树 结点度最大值是2

面向对象
封装 继承 多态
封装：只隐藏对象的属性和实现细节，仅对外提供公共访问方式
继承：提高代码复用性，继承是多态的前提
多态：实现或继承父类，重写父类方法

jdk和jre
JDK是面向开发人员使用的SDK
Java程序必须要JRE才能运行

equals和==的区别
== 判断两个对象的地址是否相同
equals 比较的是两个对象的内容是否相等
String 重写了equals方法 其他引用做比较需要手动重写equals方法
hashCode相等,equals也不一定相等
equals相同,hashCode一定相同

操作字符串
.length(长度) 
.indexOf(查找位置) 
.toUpperCase(大写) 
.toLowerCase(小写) 
.substring(截取字符串) 
.replaceAll(替换) 
.trim(去掉首尾空格)  
charAt(指定位置字符) 
.toCharArray(字符串转为字符数组) 
.split(分隔符拆分)

java IO
BIO（同步并阻塞 小网站 一个连接一个线程） NIO（同步非阻塞 一个请求一个线程 适用于短链接） AIO（异步非阻塞 一个请求一个线程 适用于长链接）

操作文件
createNewFile(创建文件)
mkdir(创建一级文件夹) 
mkdirs(创建多级文件夹)
delete(删除文件或文件夹)
exists(文件或文件夹是否存在)
isFile(是否是一个文件)
isDirectory(是否是一个目录)

集合
List(有序可重复) Set（无序不可重复） Map(键值对键唯一值不唯一)
ArrayList（数组 查询快）
LinkedList(双向链表 增删快)
ArrayList（线程不安全）Vector(线程安全)
HashMap(线程不安全) HashTable(不允许建null 线程安全 大小增加到一定的时候性能会下降 全锁) ConcurrentHashMap(不允许建null 线程安全 大小增加到一定的时候性能不会下降 分割锁定)
局部变量属于当前线程级别变量其他线程访问不了不存在线程安全不安全的问题
单例对象成员变量对同个HashMap操作存在线程安全的问题
确保集合不被修改Collections提供对应的方法

线程
守护线程（thread.start()之前.setDaemon(true)）不执行业务逻辑，守护线程跟随普通线程，当没有普通线程工作守护线程会立即结束
创建线程（extends Thread implements Runnable）
runnable（无返回值 不可以声明抛出异常） callable（有返回值 可以声明抛出异常）
线程状态
创建未启动（NEW）－运行中（RUNNABLE）－临界区外阻塞（BLOCKED）－临界区里面等待（wait）／ 超时等待－终止
死锁（两个或以上线程互相等待对方资源被释放 互斥 循环等待）防止：添加到队列中所有线程都按顺序获取资源，不同功能使用不同的锁，设置超时时间
threadLocal 线程本地变量 一个线程维护一个独立的变量副本 （单例对象成员变量线程间不共享这个属性）
volatile 内存可见但不是线程安全 所有线程都能看到共享内存的最新状态  读操作远远大于写操作 volatile变量还可以提供优于锁的性能优势
synchronized 可见性 原子性

JVM
jvm
类加载器 （转换成字节码）
运行时数据区（把字节码文件加载到内存中）
程序计数器：线程私有 当前线程所执行的字节码的行号
机栈：线程私有 局部变量 Java方法服务
堆：所有线程共享的一块内存区域 成员变量 引用类型
方法区：所有线程共享的一块内存区域 常量 静态变量
本地方法栈：线程私有 Native方法服务
执行引擎（指令集解析器去解析系统指令）
本地库接口 （调用其他语言的本地接口由CPU去执行）

双亲委派模型：
优先级的层次关系,避免类的重复加载,父类加载了该类时，子类不需要加载
类加载流程 加载（知道）、验证（验证）、准备（准备）、解析（分析）、初始化（试盘）、使用（all in）和卸载（跑）

