spring
AOP 面向切面 类的创建交给spring容器 需要时从容器取
IOC 控制反转 权限，事务，日志等逻辑抽取出来
spring注入
构造方法注入 setter注入 注解注入
Spring容器中的Bean本身不具备线程安全的
原型Bean 线程安全 单例Bean 线程不安全
在资源不共享的情况下 使用ThreadLocal为每个线程保存线程私有的数据
自动装配 @Autowired @Resource @Qualifier
事务隔离 事务间的隔离
数据库事务隔离级别（默认）
一个事务另一个事务可读取
事务顺序执行
脏读:一个事务访问数据进行了修改之前另一个事务读到了修改前的数据
幻读:一个事务读取2次，得到的记录条数不一致
不可重复读:一个事务读取同一条记录2次，得到的结果不一致
bean作用域:单例模式 原型模式 HTTPbean sessionBean 全局bean
springMVC流程: 
1 发起请求到前端控制器(DispatcherServlet)
2 前端控制器请求HandlerMapping查找Handler（可以根据xml配置、注解进行查找）
3 找到Handler给前端控制器执行Handler
4 执行HandlerAdapter处理器适配器返回ModelAndView给前端控制器
5 ModelAndView请求视图解析器ViewReslover成真正的视图view
6 返回view给前端控制器并且把模型数据填充到视图中
7 前端控制器将结果响应给客户

web.xml
加载前端控制器
springmvc.xml
配置映射处理器
配置视图解析器 将模型与视图匹配在一起

客户请求 -> 前端控制器
HandlerMapping 处理器适配器 -> 前端控制器
ModelAndView   视图解析器 -> 前端控制器
view + 数据填充 -> 前端控制器
前端控制器 －> 客户

多例
有状态的bean 存有用户信息  至少有一个状态标示
单例
无状态的bean 供的用户重复使用 没有一个状态标示

Aop 前置 后置 环绕  切点表达式

事务 对写操作（需要） 对读操作（不需要）

Spring的事务是通过AOP代理类中的一个Advice进行生效的，而传播级别定义了事务与子事务获取连接、事务提交、回滚的具体方式

Spring事务默认只对RuntimeException和Error进行回滚 如IO异常不回滚

通过mybatis连接数据库可能导致Spring事务失效（事务超时）


（Controller、Service、Dao）单例Bean,是一个无状态Bean ,是安全的 @Scope
有状态就是有数据存储功能
无状态就是不会保存数据
