package ${package}.controller;

import java.util.List;
import java.util.Map;
import org.apache.log4j.Logger;
##import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import ${package}.domain.${className};
import ${package}.service.${className}Service;
import ${package}.common.utils.PageUtils;
import ${package}.common.utils.Query;
import ${package}.common.utils.R;

/**
 * <P></P>
 * ${comments}
 * @version 1.0
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */

@RestController
@RequestMapping("/${pathName}/${classname}")
public class ${className}Controller {

	private static Logger logger = Logger.getLogger(${className}Controller.class);

	/*************************特别强调：
	 * 1、status 转码，转成  1:可用   0：不可用
	 * 2、属性对象不能为空
	 * 3、实现增量同步
	 **************************/

	@Autowired
	private ${className}Service ${classname}Service;

	/**
     * <P></P>
     * @param
     * @return
     * @throws Exception
     */
	@GetMapping()
##	@RequiresPermissions("${pathName}:${classname}:${classname}")
	String ${className}(){
	    return "${pathName}/${classname}/${classname}";
	}

	/**
     * <P></P>
     * @param
     * @return
     * @throws Exception
     */
	@GetMapping("/list")
##	@RequiresPermissions("${pathName}:${classname}:${classname}")
	public R list(@RequestParam Map<String, Object> params){
		logger.info("入参:{}");
		//查询列表数据
        Query query = new Query(params);
		List<${className}> ${classname}List = ${classname}Service.list(query);
		int total = ${classname}Service.count(query);
		PageUtils pageUtils = new PageUtils(${classname}List, total);
		logger.info("出参:{}");
		return R.ok().data(pageUtils);
	}

	/**
     * <P></P>
     * @param
     * @return
     * @throws Exception
     */
	@GetMapping("/add")
##	@RequiresPermissions("${pathName}:${classname}:add")
	String add(){
	    return "${pathName}/${classname}/add";
	}

	/**
     * <P></P>
     * @param
     * @return
     * @throws Exception
     */
	@GetMapping("/edit/{${pk.attrname}}")
##	@RequiresPermissions("${pathName}:${classname}:edit")
	String edit(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname},Model model){
		${className} ${classname} = ${classname}Service.get(${pk.attrname});
		model.addAttribute("${classname}", ${classname});
	    return "${pathName}/${classname}/edit";
	}

	/**
     * <P>保存</P>
     * @param
     * @return
     * @throws Exception
     */
	@PostMapping("/save")
##	@RequiresPermissions("${pathName}:${classname}:add")
	public R save( ${className} ${classname}){
		if(${classname}Service.save(${classname})>0){
			return R.ok();
		}
		return R.error();
	}

	/**
     * <P>修改</P>
     * @param
     * @return
     * @throws Exception
     */
	@RequestMapping("/update")
##	@RequiresPermissions("${pathName}:${classname}:edit")
	public R update( ${className} ${classname}){
		${classname}Service.update(${classname});
		return R.ok();
	}

	/**
     * <P>删除</P>
     * @param
     * @return
     * @throws Exception
     */
	@PostMapping( "/remove")
##	@RequiresPermissions("${pathName}:${classname}:remove")
	public R remove( ${pk.attrType} ${pk.attrname}){
		if(${classname}Service.remove(${pk.attrname})>0){
		return R.ok();
		}
		return R.error();
	}

	/**
     * <P>批量删除</P>
     * @param
     * @return
     * @throws Exception
     */
	@PostMapping( "/batchRemove")
##	@RequiresPermissions("${pathName}:${classname}:batchRemove")
	public R remove(@RequestParam("ids[]") ${pk.attrType}[] ${pk.attrname}s){
		${classname}Service.batchRemove(${pk.attrname}s);
		return R.ok();
	}
	
}
